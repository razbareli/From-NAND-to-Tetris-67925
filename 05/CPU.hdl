// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	//mux that outputs to register A
	Mux16 (a=instruction, b=aluOut, sel=instruction[15], out=muxAout);
	
	//do not load A register if instruction[15]==1 && instruction[5]==0, else: load A
	Not (in=instruction[5], out=notIns);
	And (a=instruction[15], b=notIns, out=andIns);
	Not (in=andIns, out=loadA);
	ARegister (in=muxAout, load=loadA, out=regAout);
	
	//load D register only if we have C instruction and instruction[4]==1
	And (a=instruction[15], b=instruction[4], out=loadD);
	DRegister (in=aluOut, load=loadD , out=regDout);
	
	//mux that outputs to the ALU
	Mux16 (a=regAout, b=inM, sel=instruction[12], out=muxALUout);
	
	ALU(x=regDout, y=muxALUout, zx=instruction[11], nx=instruction[10],
		zy=instruction[9], ny=instruction[8], f=instruction[7],
		no=instruction[6], out=aluOut, zr=zr, ng=ng);

	//checks if the ALU output is positive
	Or (a=zr, b=ng, out=or1);
	Not (in=or1, out=pos);
	
	//calculates the g function
	And (a=instruction[2], b=ng, out=JEQ);
	And (a=instruction[1], b=zr, out=JLT);
	And (a=instruction[0], b=pos, out=JGT);
	Or (a=JEQ, b=JLT, out=JLE);
	Or (a=JLE, b=JGT, out=gFunc);
	
	//load PC only if g==1 && the input is C instruction
	And (a=instruction[15], b=gFunc, out=pcLoad);
	
	//input for pc reset control bit
	Not (in=pcLoad, out=notJump);
	
	PC (in=regAout, load=pcLoad, inc=notJump, reset=reset, out[0..14]=pc);
	
	//outputs to memory
	Or16 (a=false, b=regAout, out[0..14]=addressM);
	Or16 (a=false, b=aluOut, out=outM);
	//load writeM only if we have C instruction and instruction[3]==1
	And (a=instruction[15], b=instruction[3], out=writeM);
}