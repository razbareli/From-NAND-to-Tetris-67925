// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
    IN x[16], y[16], instruction[9];
    OUT out[16], zr, ng;
     
    PARTS:
    // Put you code here:
	
	ALU (x=x, y=y, zx=instruction[5], nx=instruction[4],
		zy=instruction[3], ny=instruction[2], f=instruction[1],
		no=instruction[0], out=outAlu, zr=zrAlu, ng=ngAlu);
		
	//if output==1 then regular ALU, else shift
	And(a=instruction[8], b=instruction[7], out=regular);

	//shift inputs
	ShiftLeft (in=x, out=xLeft);
	ShiftLeft (in=y, out=yLeft);
	ShiftRight (in=x, out=xRight);
	ShiftRight (in=y, out=yRight);
	
	//choose shift
	Mux4Way16 (a=yRight, b=xRight, c=yLeft, d=xLeft, sel=instruction[4..5], out=shifted);
	
	//choose alu vs shifted
	Mux16 (a=shifted, b=outAlu, sel=regular, out=out, out[15]=ng, out[0..7]=rightSide, out[8..15]=leftSide);
	
	//determine zr
	Or8Way (in=rightSide, out=or1);
	Or8Way (in=leftSide, out=or2);
	Or(a=or1, b=or2, out=or);
	Not(in=or, out=zr);
	
	

}
