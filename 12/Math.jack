// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;
    static int temp_div;
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** returns true if the i-th bit of x is 1, false otherwise */
    function boolean bit (int x, int i){
        if ((twoToThe[i] & x) = 0){
            return false;
        }
        return true;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0){
            return x;
        }
        return -x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shifted_x;
        var int n;
        let shifted_x = x;
        let n = 0;
        while (n < 16){
            if (Math.bit(y, n)){
                let sum = sum + shifted_x;
            }
            let shifted_x = ^shifted_x;
            let n = n + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
   function int divide(int x, int y) {
		// This should be implemented without using multiplication.
		// Hint: updating the value of 2*q*y in the "if" statement requires
		// at most a single addition operator at every recursion step.
		var int q , nx, ny, helper;

		let nx = Math.abs(x);
		let ny = Math.abs(y);
		let temp_div = nx;

		if (ny > nx){
		    return 0;
		}
		let q = Math.divide(nx, ny + ny);
		if ((temp_div) < ny){
		    if ( ((x<0) & (y>0)) | ((x>0) & (y<0)) ){ // check if need to revert the sign
		        let q = -q;
		    }
		    return q + q;
		}
		else {
		    let temp_div = temp_div - ny;
		    if ( ((x<0) & (y>0)) | ((x>0) & (y<0)) ){ // check if need to revert the sign
		        let q = -q;
		    }
		    return ((q+q) + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		// This should be implemented without using division, but
		// multiplication is allowed.
		var int j;
		var int y;
		var int temp1;
		var int temp2;
		let y = 0;
		let j = 7;
		while (j > -1){
		    let temp1 = y + twoToThe[j];
		    let temp2 = temp1 * temp1;
		    if (((temp2 < x)|(temp2 = x)) & (temp2 > 0)){
		        let y = temp1;
		    }
		    let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b){
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b){
            return b;
        }
        return a;
    }
}
